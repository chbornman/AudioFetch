name: Deploy to VPS

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          debug: true
          script: |
            echo "SSH connection successful!"
            whoami
            pwd

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          debug: true
          script: |
            # Navigate to the application directory
            cd ${{ secrets.VPS_APP_DIR }}

            # Pull the latest changes from git (optional, if you keep config files there)
            git fetch origin main
            git reset --hard origin/main || true

            # Create .env file if it doesn't exist or update it
            cat > .env << EOF
            PORT=${{ secrets.APP_PORT }}
            HOST=0.0.0.0
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}
            DOWNLOADS_HOST_PATH=${{ secrets.DOWNLOADS_HOST_PATH }}
            DOWNLOADS_CONTAINER_PATH=/app/downloads
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            PGADMIN_EMAIL=${{ secrets.PGADMIN_EMAIL }}
            PGADMIN_PASSWORD=${{ secrets.PGADMIN_PASSWORD }}
            PGADMIN_PORT=${{ secrets.PGADMIN_PORT }}
            CONTACT_EMAIL=${{ secrets.CONTACT_EMAIL }}
            EOF

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Copy init.sql file from repository
            cat > init.sql << 'EOFSQL'
            -- Create download logs table
            CREATE TABLE IF NOT EXISTS download_logs (
                id SERIAL PRIMARY KEY,
                job_id VARCHAR(36) UNIQUE NOT NULL,
                url TEXT NOT NULL,
                url_domain VARCHAR(255),
                custom_name VARCHAR(255),
                plugin VARCHAR(50),
                workers INTEGER,
                download_mode VARCHAR(20),
                is_authenticated BOOLEAN DEFAULT FALSE,
                connection_id VARCHAR(36),
                status VARCHAR(20),
                error_message TEXT,
                tracks_count INTEGER,
                total_size_bytes BIGINT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP WITH TIME ZONE,
                duration_seconds DECIMAL(10,2),
                user_agent TEXT,
                ip_address INET
            );

            -- Create indexes for common queries
            CREATE INDEX idx_download_logs_created_at ON download_logs(created_at DESC);
            CREATE INDEX idx_download_logs_status ON download_logs(status);
            CREATE INDEX idx_download_logs_url_domain ON download_logs(url_domain);
            CREATE INDEX idx_download_logs_download_mode ON download_logs(download_mode);

            -- Create a view for daily statistics
            CREATE VIEW daily_download_stats AS
            SELECT 
                DATE(created_at) as download_date,
                COUNT(*) as total_downloads,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_downloads,
                COUNT(CASE WHEN status = 'error' THEN 1 END) as failed_downloads,
                COUNT(CASE WHEN download_mode = 'server' THEN 1 END) as server_downloads,
                COUNT(CASE WHEN download_mode = 'browser' THEN 1 END) as browser_downloads,
                COUNT(DISTINCT url_domain) as unique_domains,
                AVG(tracks_count) as avg_tracks_per_download,
                SUM(total_size_bytes) as total_bytes_downloaded
            FROM download_logs
            GROUP BY DATE(created_at);

            -- Create a view for domain statistics
            CREATE VIEW domain_stats AS
            SELECT 
                url_domain,
                COUNT(*) as download_count,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_downloads,
                AVG(tracks_count) as avg_tracks,
                MAX(created_at) as last_download
            FROM download_logs
            GROUP BY url_domain
            ORDER BY download_count DESC;
            EOFSQL

            # Create docker-compose.yml
            echo "services:" > docker-compose.yml
            echo "  postgres:" >> docker-compose.yml
            echo "    image: postgres:16-alpine" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml
            echo "    environment:" >> docker-compose.yml
            echo "      POSTGRES_USER: \${POSTGRES_USER:-audiofetch}" >> docker-compose.yml
            echo "      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD:-audiofetch_secret}" >> docker-compose.yml
            echo "      POSTGRES_DB: \${POSTGRES_DB:-audiofetch_db}" >> docker-compose.yml
            echo "    volumes:" >> docker-compose.yml
            echo "      - postgres_data:/var/lib/postgresql/data" >> docker-compose.yml
            echo "      - ./init.sql:/docker-entrypoint-initdb.d/init.sql" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"\${POSTGRES_PORT:-5432}:5432\"" >> docker-compose.yml
            echo "    healthcheck:" >> docker-compose.yml
            echo "      test: [\"CMD-SHELL\", \"pg_isready -U \${POSTGRES_USER:-audiofetch} -d \${POSTGRES_DB:-audiofetch_db}\"]" >> docker-compose.yml
            echo "      interval: 5s" >> docker-compose.yml
            echo "      timeout: 5s" >> docker-compose.yml
            echo "      retries: 20" >> docker-compose.yml
            echo "      start_period: 60s" >> docker-compose.yml
            echo "" >> docker-compose.yml
            echo "  web:" >> docker-compose.yml
            echo "    image: ghcr.io/chbornman/audiofetch:latest" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"\${PORT}:\${PORT}\"" >> docker-compose.yml
            echo "    volumes:" >> docker-compose.yml
            echo "      - \"\${DOWNLOADS_HOST_PATH}:\${DOWNLOADS_CONTAINER_PATH}\"" >> docker-compose.yml
            echo "    env_file:" >> docker-compose.yml
            echo "      - .env" >> docker-compose.yml
            echo "    environment:" >> docker-compose.yml
            echo "      DATABASE_URL: postgresql://\${POSTGRES_USER:-audiofetch}:\${POSTGRES_PASSWORD:-audiofetch_secret}@postgres:5432/\${POSTGRES_DB:-audiofetch_db}" >> docker-compose.yml
            echo "    depends_on:" >> docker-compose.yml
            echo "      postgres:" >> docker-compose.yml
            echo "        condition: service_healthy" >> docker-compose.yml
            echo "    command: >" >> docker-compose.yml
            echo "      uvicorn app:app" >> docker-compose.yml
            echo "        --host \${HOST}" >> docker-compose.yml
            echo "        --port \${PORT}" >> docker-compose.yml
            echo "        --log-level \${LOG_LEVEL}" >> docker-compose.yml
            echo "" >> docker-compose.yml
            echo "  pgadmin:" >> docker-compose.yml
            echo "    image: dpage/pgadmin4:latest" >> docker-compose.yml
            echo "    restart: unless-stopped" >> docker-compose.yml
            echo "    environment:" >> docker-compose.yml
            echo "      PGADMIN_DEFAULT_EMAIL: \${PGADMIN_EMAIL:-admin@example.com}" >> docker-compose.yml
            echo "      PGADMIN_DEFAULT_PASSWORD: \${PGADMIN_PASSWORD:-admin}" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"\${PGADMIN_PORT:-5050}:80\"" >> docker-compose.yml
            echo "    depends_on:" >> docker-compose.yml
            echo "      - postgres" >> docker-compose.yml
            echo "    volumes:" >> docker-compose.yml
            echo "      - pgadmin_data:/var/lib/pgadmin" >> docker-compose.yml
            echo "" >> docker-compose.yml
            echo "volumes:" >> docker-compose.yml
            echo "  postgres_data: {}" >> docker-compose.yml
            echo "  pgadmin_data: {}" >> docker-compose.yml

            # Pull the latest image
            docker compose pull

            # Stop and remove old containers (preserve volumes)
            docker compose down || true

            # Start new containers
            docker compose up -d
            
            # Wait a moment and check container status
            sleep 10
            echo "=== Container Status ==="
            docker compose ps
            echo "=== PostgreSQL Logs ==="
            docker compose logs postgres | tail -20
            
            # Clean up old images
            docker image prune -f
